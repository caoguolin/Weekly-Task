##只用加减乘除求根号
##用牛顿法进行求解
##牛顿法的具体求解思路是以曲代直，不断用切线来逼近根
##对于求解根号问题，可以转换为求x^2-a=0的根，其中a就是开根号的数，而x就是要求的结果
##然后转换为f(x)=f(x0)+(x-x0)f'(x0)
##令f(x)=0,得f(x0)+(x-x0)f'(x0)=0，进而x=x0-f(x0)/f'(x0)
##回代可得x0=(x0+a/x0)2
##以上求解出来的就是迭代公式，在设置初值后可以按迭代公式开始迭代，在迭代到设置的收敛精度以后就是要的结果


def sqrt(x):
    '''
    该函数用于开根号计算
    x即为要开根号的数
    '''
    if x < 0:
        return ('负数无法开根号')
    if x == 0:
        return 0
    ##设置的初值即为赋给上述公式中的x0的第一个值，为避免出错，可设置为一个任意正值（避免负值）
    beg = 1
    while True:
        ##实际上是一个不断真实值的过程，逼近的程度由收敛值决定
        new = beg
        beg = (beg + x/beg)/2
        ##设置收敛精度
        if abs(beg - new) < 1e-6:
            ##为了让能完全开方的如4这样的数计算结果不是有保留小数点的近似过程
            ##所以添加一个回溯判断，对结果取整后乘方进行判断
            if (int(beg))*(int(beg)) == x:
                return int(beg)
            return beg

test = sqrt(7)
print(test)