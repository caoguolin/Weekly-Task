method2:蒙特卡洛法
[{'iter': 100, 'val': 2.96, 'time': 0.0001308}, {'iter': 1000, 'val': 3.184, 'time': 0.0007608999999999999}, {'iter': 10000, 'val': 3.136, 'time': 0.0075263}, {'iter': 100000, 'val': 3.14724, 'time': 0.08166520000000001}]


method3:幂级数求和法
[{'iter': 10, 'val': 3.1415926535897913, 'time': 4.749999999999999e-05}, {'iter': 100, 'val': 3.141592653589793, 'time': 0.0002249000000000001}, {'iter': 1000, 'val': 3.141592653589793, 'time': 0.0043297000000000006}, {'iter': 10000, 'val': 3.141592653589793, 'time': 0.6396956}]


method:割圆术法
[{'iter': 10, 'val': 3.1415925166921577, 'time': 9.919999999999997e-05}, {'iter': 50, 'val': 3.1415926535897936, 'time': 0.00021790000000000004}, {'iter': 100, 'val': 3.1415926535897936, 'time': 0.0004916}, {'iter': 250, 'val': 3.1415926535897936, 'time': 0.0011609999999999676}]



通过比较发现一下结论：
1.三种方法中，method4需要最小的迭代次数即可到达最大的精度，
或者说对于相同精度的结果,三种方法需要的迭代次数排序为：
method4<method3<method2

2.但是迭代次数并不能代表时间，因为它们每种方法每次迭代的复杂度是不一样的。
所以这里需要对比相同精度下所需要的时间，发现三者相比，在一定范围内，到达相同精度，所用时间长短为:
method3<method4<method2

3.第二点中的“一定范围”需要注意，通过比较发现，虽然method3比method4要快，但是method3收敛较快，到达一定迭代次数后，精度不再变化，而method4则收敛稍慢，而由于计算机的计算方式对于数字的位数有所限制，所以对于后面的精度暂时无法进行考量比较，所以当经过足够的时间以后这两种方法哪种精度更高暂时无法知道。

猜测的是method3，幂级数公式法的定义是最贴切pi的真实值的，也是误差最小的，而method2蒙特卡洛法和method4的割圆法都是通过转换的方法来进行求解，所以相比来说会慢一些。
同时method3既然收敛最快，那么给足够的时间显示出足够的位数结果的话，应该还是method3的效果最好。

4.method2区别于method3和method4，后两种方法都是随着迭代次数增加，精度不断增加，而对于method2的蒙特卡洛法，它虽然总体上也是在不断逼近，但是是一个振荡的过程，原因在于其用了random的概率方法，所以导致它每次运行的结果都是不一样的。